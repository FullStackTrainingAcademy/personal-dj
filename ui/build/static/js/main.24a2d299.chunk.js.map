{"version":3,"sources":["utilities/constants.js","assets/personal_dj_logo.png","components/Home.tsx","reportWebVitals.js","assets/8-bit-heart.png","components/Footer.tsx","utilities/cookieHandler.ts","components/SearchResultList.tsx","utilities/DisplayUtilities.ts","utilities/apiErrorHandler.ts","utilities/JSONMapperUtilities.ts","assets/loader.svg","utilities/LoadingAnimation.tsx","components/TrackSearchForm.tsx","components/PlaylistParametersForm.tsx","components/PlaylistResultList.tsx","components/Dashboard.tsx","index.js"],"names":["PATHS","Home","className","src","logo","alt","onClick","axios","get","then","r","window","location","href","data","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Footer","width","heart_image","target","rel","TOKEN_COOKIE","getTokenFromCookies","Cookies","removeCookie","remove","SearchResultList","searchResults","setCurrentSelected","useState","selectedToShow","setSelectedToShow","res","forEach","track","key","push","renderResults","map","result","trackId","id","imgUrl","title","artistName","fixTrackName","inTrackName","regmatch","match","replace","handleError","error","console","message","includes","alert","idsFromTracks","tracks","ids","t","LoadingAnimation","show","loader","TrackSearchForm","setSelected","useForm","register","handleSubmit","watch","Map","results","setResults","offset","useRef","loading","setLoading","trackSearchQuery","getSearchResults","params","track_value","searchOffset","current","token","response","searchResultsAsJSON","trackResult","items","i","length","tempImgUrl","album","images","url","tempTitle","name","tempArtistName","artists","tempTrackId","set","e","mapJSONTrackSearchToModel","catch","err","finally","onSubmit","placeholder","required","size","Math","max","PlaylistParametersForm","setParameters","reset","formState","errors","acoustic","BPM","danceable","hype","instrumental","numOfSongs","popular","positiveness","vocal","min","step","PlaylistResultList","selectedTrack","parameters","explicitResults","nonExplicitResults","currentList","setCurrentList","explicitChecked","explicitCreated","nonExplicitCreated","useEffect","seed_tracks","limit","danceability","energy","acousticness","speechiness","instrumentalness","tempo","valence","resp","explicit","nonExplicit","dataAsJSON","curr","mapJSONRecommendedTracksToModel","savePlaylist","confirm","seed_track","playlist_params","track_list","playlist_id","response2","checked","onChange","event","Dashboard","setSelectedTrack","playlistParams","setPlaylistParams","history","useHistory","authToken","URLSearchParams","search","newToken","ReactDOM","render","StrictMode","path","exact","document","getElementById"],"mappings":"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","file":"static/js/main.24a2d299.chunk.js","sourcesContent":["export const PATHS = {\n    api: \"/api\"\n};\n\nexport const image404_url = \"https://www.publicdomainpictures.net/pictures/280000/velka/not-found-image-15383864787lu.jpg\";","export default __webpack_public_path__ + \"static/media/personal_dj_logo.5b25a09b.png\";","import React from \"react\";\nimport {PATHS} from \"../utilities/constants\";\nimport axios from \"axios\";\nimport logo from \"../assets/personal_dj_logo.png\";\n\nconst Home = () => {\n    return (\n        <section>\n            <div className=\"container w-100\">\n                <div className=\"my-5 justify-content-center text-center\">\n                    <div className=\"text-center\">\n                        <img src={logo} className=\"col-1\"\n                             alt={\"Personal DJ Logo of a green music element in a circle\"}/>\n                        <h1 className=\"\">Personal DJ</h1>\n                    </div>\n                    <p>\n                        We use Spotify's secure login to connect to your account. We never\n                        see your email or password, nor do we care to. We just want to find\n                        you some good music.\n                    </p>\n                    <button\n                        onClick={login}\n                        type=\"button\"\n                        className=\"btn btn-primary login-btn col-sm-12 col-lg-6\"\n                    >\n                        Login with Spotify\n                    </button>\n                </div>\n            </div>\n        </section>\n    );\n\n    function login() {\n        axios.get(PATHS.api + \"/login\").then(r => {\n            window.location.href = r.data;\n        })\n    }\n};\n\nexport default Home;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/8-bit-heart.663f7e33.png\";","import React from \"react\";\n\nimport heart_image from \"../assets/8-bit-heart.png\";\n\nconst Footer = () => {\n    return (\n        <footer className=\"text-center my-5\">\n            <hr/>\n            <p>\n                Made with\n                <img className=\"mx-1\" width=\"20px\" src={heart_image} alt={\"8 bit heart logo\"}/> by\n                <a\n                    href=\"https://github.com/RyanRussell00/personal-dj/blob/master/CONTRIBUTORS.md\"\n                    target=\"_blank\"\n                    rel={\"noreferrer\"}\n                    className=\"mx-1\"\n                >\n                    Our Contributors\n                </a>\n            </p>\n            <p>\n                This is an open source project.\n                <a href=\"https://github.com/RyanRussell00/personal-dj\" className=\"mx-1\">\n                    Contribute now!\n                </a>\n            </p>\n            <small>Version 2.0 -- Now with extra cheese!</small>\n        </footer>\n    );\n};\n\nexport default Footer;\n","import Cookies from \"js-cookie\";\nconst TOKEN_COOKIE = \"personal_dj_token\";\n\nexport const saveToken = (newToken: string) => {\n    removeCookie();\n    // Set the cookie to expire in 1 hour (Spotify expiry time)\n    // The \"expires\" value has to be in days, so 1/24 is 1 hour\n    // let inOneHour = 1 / 24;\n    Cookies.set(TOKEN_COOKIE, newToken);\n}\n\nexport const getTokenFromCookies = () => {\n    return Cookies.get(TOKEN_COOKIE);\n}\n\nexport const removeCookie = () => {\n    Cookies.remove(TOKEN_COOKIE);\n}\n\nexport const tokenError = () => {\n    removeCookie();\n}","import {SearchResultModel} from \"../models/SearchResultModel\";\nimport React, {ChangeEvent, EventHandler, MouseEventHandler, useState} from \"react\";\nimport {mapJSONTrackSearchToModel} from \"../utilities/JSONMapperUtilities\";\n\ntype SearchResultListProps = {\n    searchResults: Map<string, SearchResultModel>,\n    setCurrentSelected: (track: SearchResultModel) => void\n}\n\nexport const SearchResultList: React.FC<SearchResultListProps> = ({searchResults, setCurrentSelected}) => {\n        // Keep track of selected locally to show the selected one\n        const [selectedToShow, setSelectedToShow] = useState(\"\");\n\n        const handleSelectTrack = (trackId: string) => {\n            setCurrentSelected(searchResults.get(trackId)!!); // Callback function so the parent can have access to the selected id\n            setSelectedToShow(trackId); // Set the selected to show which one is highlighted\n        };\n\n        const renderResults = () => {\n            let res: SearchResultModel[] = [];\n            searchResults.forEach((track, key) => {\n                res.push(track);\n            });\n            return res;\n        }\n\n        return (\n            <>\n                {renderResults().map((result) => {\n                    return (\n                        <div className=\"col-lg col-sm-3 m-1\">\n                            <div\n                                className={\n                                    \"card shadow track my-2 d-block \" +\n                                    (selectedToShow == result.trackId ? \"selected-track\" : \"\")\n                                }\n                                id={result.trackId} onClick={() => handleSelectTrack(result.trackId)}\n                            >\n                                <img className=\"card-img-top\" src={result.imgUrl}/>\n                                <p className=\"card-title py-2\">\n                                    {result.title}\n                                    <br/>\n                                    <i>by {result.artistName}</i>\n                                </p>\n                            </div>\n                        </div>\n                    );\n                })}\n            </>\n        );\n    }\n;\n","//         // function that fixes a track name that has quotes\nexport function fixTrackName(inTrackName: string) {\n    let regmatch = /\\\\([\\s\\S])|(\")/g;\n\n    if (inTrackName != \"Title Not Found\" && inTrackName.match(regmatch)) {\n        return inTrackName.replace(regmatch, \"&quot;\");\n    }\n    return inTrackName;\n}","import {removeCookie} from './cookieHandler'\n\n// TODO: Do some more extensive error handling w/ better messages\nexport const handleError = (error: any) => {\n    console.error(error)\n    if (!error || !error.message) {\n        alert(\"Unknown error. Please try refreshing your browser.\");\n        return;\n    }\n    if (error.message.includes(\"401\")) {\n        alert(\"Session expired. Please login again.\");\n        removeCookie();\n        window.location.href = '/';\n\n    } else {\n        alert(\"Unknown error. Please try again. If issue continues, refresh your browser.\")\n    }\n}\n","import {AxiosResponse} from \"axios\";\nimport {SearchResultModel} from \"../models/SearchResultModel\";\nimport {fixTrackName} from \"./DisplayUtilities\";\nimport {image404_url} from \"./constants\";\nimport {PlaylistTrackModel} from \"../models/PlaylistTrackModel\";\nimport {handleError} from \"./apiErrorHandler\";\n\nexport const mapJSONTrackSearchToModel = (data: AxiosResponse) => {\n    let results = new Map<string, SearchResultModel>();\n    // This fat try catch makes me feel sick\n    try {\n        let searchResultsAsJSON = data.data.trackResult.tracks.items;\n        // Parse JSON and create them into components\n        for (let i = 0; i < searchResultsAsJSON.length; i++) {\n            let tempImgUrl = searchResultsAsJSON[i].album.images[0].url || image404_url;\n            let tempTitle = fixTrackName(\n                searchResultsAsJSON[i].name || \"Title Not Found\"\n            );\n            let tempArtistName =\n                searchResultsAsJSON[i].artists[0].name || \"Artist Not Found\";\n            let tempTrackId: string = searchResultsAsJSON[i].id;\n            // Add all results to explicit list (both explicit and non explicit)\n            results.set(tempTrackId,\n                {\n                    trackId: tempTrackId,\n                    title: tempTitle,\n                    imgUrl: tempImgUrl,\n                    artistName: tempArtistName,\n                });\n        }\n    } catch (e) {\n        console.error(\"Failed to convert track result response to model\", e);\n        handleError({message: \"401\"});\n    }\n    return results;\n}\n\nexport const mapJSONRecommendedTracksToModel = (data: AxiosResponse) => {\n    let explicit: PlaylistTrackModel[] = [];\n    let nonExplicit: PlaylistTrackModel[] = [];\n    try {\n        if (!data) {\n            return [[], []];\n        }\n        let dataAsJSON = data.data.trackResult;\n        for (let i = 0; i < dataAsJSON.tracks.length; i++) {\n            let curr = dataAsJSON.tracks[i];\n            let track: PlaylistTrackModel = {\n                trackId: curr.id,\n                title: curr.name,\n                imgUrl: curr.album.images[0].url,\n                artistName: curr.artists[0].name,\n                explicit: curr.explicit\n            };\n            // Always add to explicit\n            explicit.push(track);\n            // Only add non explicit to nonExplicit one\n            if (!track.explicit) {\n                nonExplicit.push(track);\n            }\n        }\n    } catch (e) {\n        console.error(\"Failed to convert recommendations to model\");\n        handleError({message: \"401\"});\n    }\n    return [explicit, nonExplicit];\n}\nexport const idsFromTracks = (tracks: PlaylistTrackModel[]) => {\n    let ids: string[] = [];\n    tracks.forEach((t) => {\n        ids.push(t.trackId);\n    })\n    return ids;\n}","export default __webpack_public_path__ + \"static/media/loader.bf1608ac.svg\";","import React from \"react\";\n\nimport loader from \"../assets/loader.svg\";\n\ntype LoadingAnimationProps = {\n    show: boolean\n}\nexport const LoadingAnimation: React.FC<LoadingAnimationProps> = ({show}) => {\n    return (\n        <>\n            {show ? <img src={loader} className=\"m-5\"/> : <></>}\n        </>\n    )\n}","import React, {useEffect, useRef, useState} from \"react\";\nimport {useForm, SubmitHandler} from \"react-hook-form\";\nimport {getTokenFromCookies, saveToken, tokenError} from \"../utilities/cookieHandler\";\nimport {useHistory} from 'react-router-dom';\nimport {SearchResultList} from \"./SearchResultList\";\nimport {SearchResultModel} from \"../models/SearchResultModel\";\nimport axios from \"axios\";\nimport {PATHS} from \"../utilities/constants\";\nimport {mapJSONTrackSearchToModel} from \"../utilities/JSONMapperUtilities\";\nimport {handleError} from \"../utilities/apiErrorHandler\";\nimport {LoadingAnimation} from \"../utilities/LoadingAnimation\";\n\ntype TrackSearchFormInputs = {\n    trackName: string\n};\n\ntype TrackSearchFormProps = {\n    setSelected: (track: SearchResultModel) => void\n}\n\nexport const TrackSearchForm: React.FC<TrackSearchFormProps> = ({setSelected}) => {\n    const {register, handleSubmit, watch} = useForm<TrackSearchFormInputs>();\n\n    const [results, setResults] = useState<Map<string, SearchResultModel>>(new Map());\n    // Set offset to -1 so we can track when the page is first loaded, so we don't show \"No tracks found\" on initial load\n    // Offset is overridden to 0 after search is pressed\n    const offset = useRef(-1);\n    const [loading, setLoading] = useState(false);\n\n    let trackSearchQuery = watch(\"trackName\") // watch input value by passing the name of it\n\n    const getSearchResults = () => {\n        setLoading(true);\n        axios\n            .get(PATHS.api + \"/trackSearch\", {\n                params: {\n                    track_value: trackSearchQuery,\n                    searchOffset: offset.current,\n                    token: getTokenFromCookies(),\n                },\n            })\n            .then((response) => {\n                setResults(mapJSONTrackSearchToModel(response));\n                // loadSearchResults(response.data.trackResult.tracks.items);\n            }).catch((err) => {\n            handleError(err);\n        }).finally(() => setLoading(false));\n    }\n\n    const loadLessResults = () => {\n        // Prevents offset from going negative\n        offset.current = (Math.max(0, offset.current - 5));\n        getSearchResults();\n    };\n\n    const loadMoreResults = () => {\n        offset.current = offset.current + 5;\n        getSearchResults();\n    };\n\n    return (\n        /* \"handleSubmit\" will validate your inputs before invoking \"onSubmit\" */\n        <form onSubmit={handleSubmit(() => {\n            // Reset offset to 0 when searching for a new title\n            offset.current = 0;\n            getSearchResults();\n        })} className=\"container\">\n\n            <h1>Step 1: Pick a seed song</h1>\n            {/* include validation with required or other standard HTML validation rules */}\n            <input {...register(\"trackName\")}\n                   placeholder={\"Search for a track\"}\n                   className={\"w-50\"}\n                   required/>\n            <br/>\n            <button className=\"my-2 px-5 btn btn-success\" type=\"submit\">\n                Search\n            </button>\n\n            <LoadingAnimation show={loading}/>\n\n            <div className=\"search-results p-2\">\n                <SearchResultList searchResults={results} setCurrentSelected={setSelected}/>\n            </div>\n\n            {\n                results.size > 0 ?\n                    (<div className=\"my-4\">\n                        <ul className=\"list-inline\">\n                            <li className=\"list-inline-item\" onClick={loadLessResults}>\n                                <a className=\"btn btn-success text-white\"> &#60; Last 5 </a>\n                            </li>\n                            <li className=\"list-inline-item\" onClick={loadMoreResults}>\n                                <a className=\"btn btn-success text-white\">Next 5 &#62;</a>\n                            </li>\n                        </ul>\n                    </div>) : ((offset.current >= 0 && !loading) ?\n                    <h3 className=\"my-3 text-white\">No tracks found</h3> : <></>)\n            }\n        </form>\n    );\n}","import React, {useRef} from \"react\";\nimport {useForm} from \"react-hook-form\";\nimport {PlaylistParametersModel} from \"../models/PlaylistParametersModel\";\n\ntype PlaylistParametersFormProps = {\n    setParameters: (params: PlaylistParametersModel) => void\n}\n\nexport const PlaylistParametersForm: React.FC<PlaylistParametersFormProps> = ({setParameters}) => {\n    const {register, handleSubmit, watch, reset, formState: {errors}} = useForm<PlaylistParametersModel>();\n\n    const params = useRef<PlaylistParametersModel>({\n        acoustic: -1,\n        BPM: -1,\n        danceable: -1,\n        hype: -1,\n        instrumental: -1,\n        numOfSongs: -1,\n        popular: -1,\n        positiveness: -1,\n        vocal: -1\n    });\n\n    params.current = {\n        acoustic: watch(\"acoustic\"),\n        BPM: watch(\"BPM\"),\n        danceable: watch(\"danceable\"),\n        hype: watch(\"hype\"),\n        instrumental: watch(\"instrumental\"),\n        numOfSongs: watch(\"numOfSongs\"),\n        popular: watch(\"popular\"),\n        positiveness: watch(\"positiveness\"),\n        vocal: watch(\"vocal\")\n    }\n\n    const onSubmit = () => {\n        setParameters(params.current);\n    }\n\n    const clearAllParameters = () => {\n        reset();\n    }\n\n    return (\n        /* \"handleSubmit\" will validate your inputs before invoking \"onSubmit\" */\n        <form onSubmit={handleSubmit(onSubmit)} className=\"container\">\n\n            <hr/>\n\n            <h1>Step 2: Fine tune your playlist</h1>\n            <p>All inputs below are <b>OPTIONAL.</b> <br/>\n                Leave blank to not set.</p>\n\n            <button onClick={clearAllParameters} className={\"btn btn-danger\"} type={\"button\"}>Reset All Parameters\n            </button>\n\n            <div className={\"row row-cols-2 g-2 g-lg-3\"}>\n\n                <div className={\"col\"}>\n                    <label>How acoustic do you want the tracks? (0 to 10)</label>\n                    <input {...register(\"acoustic\")}\n                           placeholder={\"Acousticness\"}\n                           type={\"number\"}\n                           min={0} max={10} step={1}\n                           className={\"form-control mb-3\"}\n                    />\n\n                    <label>What BPM (beats per minute) do you want? (0 to 1000)</label>\n                    <input {...register(\"BPM\")}\n                           placeholder={\"Beats Per Minute (BPM)\"}\n                           type={\"number\"}\n                           min={0} max={1000} step={1}\n                           className={\"form-control mb-3\"}\n                    />\n\n                    <label>How danceable do you want the tracks? (0 to 10)</label>\n                    <input {...register(\"danceable\")}\n                           placeholder={\"Dance yo butt off\"}\n                           className={\"form-control mb-3\"}\n                    />\n\n                    <label>How positive (emotionally) do you want the tracks? (0 to 10)</label>\n                    <input {...register(\"positiveness\")}\n                           placeholder={\"Make me feel good\"}\n                           type={\"number\"}\n                           min={0} max={10} step={1}\n                           className={\"form-control mb-3\"}\n                    />\n                </div>\n\n                <div className={\"col\"}>\n                    <label>How Hype do you want the tracks? (0 to 10)</label>\n                    <input {...register(\"hype\")}\n                           placeholder={\"H Y P E\"}\n                           type={\"number\"}\n                           min={0} max={10} step={1}\n                           className={\"form-control mb-3\"}\n                    />\n\n                    <label>How Instrumental do you want the tracks? (0 to 10)</label>\n                    <input {...register(\"instrumental\")}\n                           placeholder={\"Less talk, more music\"}\n                           type={\"number\"}\n                           min={0} max={10} step={1}\n                           className={\"form-control mb-3\"}\n                    />\n\n                    <label>How popular do you want the tracks? (0 to 100)</label>\n                    <input {...register(\"popular\")}\n                           placeholder={\"Mo' popular\"}\n                           className={\"form-control mb-3\"}\n                    />\n\n                    <label>How vocal do you want the tracks? (0 to 10)</label>\n                    <input {...register(\"vocal\")}\n                           placeholder={\"More talk, less music\"}\n                           type={\"number\"}\n                           min={0} max={10} step={1}\n                           className={\"form-control mb-3\"}\n                    />\n                </div>\n\n            </div>\n            <br/>\n\n            <div className={\"\"}>\n                <label><b>(Required)</b> How many songs do you want? (1 to 50)</label>\n                <br/>\n                <input {...register(\"numOfSongs\")}\n                       placeholder={\"# of songs\"}\n                       type={\"number\"}\n                       min={1} max={50} step={1}\n                       className={\"p-2\"}\n                       required\n                />\n            </div>\n            <button className=\"my-3 px-5 btn btn-success\" type=\"submit\">\n                Create Playlist\n            </button>\n\n\n        </form>\n    );\n}","import React, {ChangeEvent, useEffect, useRef, useState} from \"react\";\nimport {useForm, SubmitHandler} from \"react-hook-form\";\nimport {getTokenFromCookies, saveToken, tokenError} from \"../utilities/cookieHandler\";\nimport {useHistory} from 'react-router-dom';\nimport {SearchResultList} from \"./SearchResultList\";\nimport {SearchResultModel} from \"../models/SearchResultModel\";\nimport axios, {AxiosResponse} from \"axios\";\nimport {PATHS} from \"../utilities/constants\";\nimport {\n    idsFromTracks,\n    mapJSONRecommendedTracksToModel,\n    mapJSONTrackSearchToModel\n} from \"../utilities/JSONMapperUtilities\";\nimport {handleError} from \"../utilities/apiErrorHandler\";\nimport {LoadingAnimation} from \"../utilities/LoadingAnimation\";\nimport {PlaylistParametersModel} from \"../models/PlaylistParametersModel\";\nimport {PlaylistTrackModel} from \"../models/PlaylistTrackModel\";\n\ntype PlaylistResultListProps = {\n    selectedTrack: SearchResultModel,\n    parameters: PlaylistParametersModel\n}\n\nexport const PlaylistResultList: React.FC<PlaylistResultListProps> = ({selectedTrack, parameters}) => {\n\n    const explicitResults = useRef<PlaylistTrackModel[]>([]);\n    const nonExplicitResults = useRef<PlaylistTrackModel[]>([]);\n    const [currentList, setCurrentList] = useState<PlaylistTrackModel[]>([]);\n    const explicitChecked = useRef(false);\n    const explicitCreated = useRef(false);\n    const nonExplicitCreated = useRef(false);\n\n    const [loading, setLoading] = useState(false);\n\n    // Load results\n    useEffect(() => {\n        setLoading(true);\n        explicitChecked.current = false;\n        explicitCreated.current = false;\n        nonExplicitCreated.current = false;\n\n        axios\n            .get(PATHS.api + \"/recommendations\", {\n                params: {\n                    token: getTokenFromCookies(),\n                    seed_tracks: selectedTrack.trackId,\n                    limit: parameters.numOfSongs,\n                    danceability: parameters.danceable / 10,\n                    energy: parameters.hype / 10,\n                    popular: parameters.popular,\n                    acousticness: parameters.acoustic,\n                    speechiness: parameters.vocal,\n                    instrumentalness: parameters.instrumental,\n                    tempo: parameters.BPM,\n                    valence: parameters.positiveness,\n                },\n            }).then((resp) => {\n            [explicitResults.current, nonExplicitResults.current] = mapJSONRecommendedTracksToModel(resp);\n            setCurrentList(explicitResults.current);\n        })\n            .catch((err) => handleError(err))\n            .finally(() => setLoading(false));\n    }, [parameters]);\n\n    /* Check if the current list of recommendations has already been saved\n     *  False = Playlist has not been saved already */\n    const hasPlaylistSavedAlready = () => {\n        if (explicitChecked.current && explicitCreated.current) {\n            return true;\n        } else if (!explicitChecked.current && nonExplicitCreated.current) {\n            return true;\n        }\n        return false;\n    }\n\n    const savePlaylist = () => {\n        setLoading(true);\n        if (hasPlaylistSavedAlready()) {\n            let confirm = window.confirm(\"This playlist already created do you want to create duplicate playlist?\");\n            if (!confirm) {\n                setLoading(false);\n                return;\n            }\n        }\n        axios\n            .get(PATHS.api + \"/createPlaylist\", {\n                params: {\n                    token: getTokenFromCookies(),\n                    seed_track: selectedTrack,\n                    playlist_params: parameters\n                },\n            })\n            .then((response) => {\n                axios\n                    .get(PATHS.api + \"/addTracks\", {\n                        params: {\n                            track_list: idsFromTracks(currentList),\n                            playlist_id: response.data.data,\n                            token: getTokenFromCookies(),\n                        },\n                    })\n                    .then((response2) => {\n                        alert(\"Playlist saved!\");\n                        if (explicitChecked.current) {\n                            explicitCreated.current = true;\n                        } else {\n                            nonExplicitCreated.current = true;\n                        }\n                    })\n                    .catch((error) => {\n                        handleError(error);\n                    });\n            })\n            .catch((error) => {\n                handleError(error)\n            }).finally(() => setLoading(false));\n    };\n\n    const handleExplicitChange = (event: ChangeEvent<HTMLInputElement>) => {\n        explicitChecked.current = !explicitChecked.current;\n        if (event.target.checked) {\n            setCurrentList(nonExplicitResults.current);\n        } else {\n            setCurrentList(explicitResults.current);\n        }\n    }\n\n    return (\n        <>\n            <LoadingAnimation show={loading}/>\n            <div>\n                <button\n                    className=\"btn btn-success text-white my-3 p-4\"\n                    onClick={savePlaylist}\n                >\n                    Save as a Playlist\n                </button>\n                <form>\n                    <div className=\"custom-control custom-checkbox mb-3\">\n                        <input\n                            type=\"checkbox\"\n                            className=\"custom-control-input\"\n                            checked={explicitChecked.current}\n                            onChange={handleExplicitChange}\n                        />\n                        <label className=\"custom-control-label mx-1\">\n                            Remove Explicit Tracks\n                        </label>\n                    </div>\n                </form>\n            </div>\n            {!loading &&\n            <div className=\"search-results\">\n                <h2>{currentList.length} tracks found</h2>\n                {\n                    currentList.map((track) => {\n                        return (<div className=\"col-lg col-sm-3 m-1\">\n                            <div\n                                className={\"card shadow track my-2 d-block\"}\n                            >\n                                <img className=\"card-img-top\" src={track.imgUrl}/>\n                                <p className=\"card-title py-2\">\n                                    {track.title}\n                                    <br/>\n                                    <i>by {track.artistName}</i>\n                                    <br/>\n                                    <i>{track.explicit ? \"Explicit\" : \"Non-Explicit\"}</i>\n                                </p>\n                            </div>\n                        </div>)\n                    })\n                }\n            </div>\n            }\n            <div className={\"text-center\"}>\n                <button\n                    className=\"btn btn-success text-white my-3 p-4\"\n                    onClick={savePlaylist}\n                >\n                    Save as a Playlist\n                </button>\n            </div>\n        </>\n    );\n}","import {SearchResultModel} from \"../models/SearchResultModel\";\nimport {useEffect, useState} from \"react\";\nimport {PlaylistParametersModel} from \"../models/PlaylistParametersModel\";\nimport {TrackSearchForm} from \"./TrackSearchForm\";\nimport {getTokenFromCookies, saveToken, tokenError} from \"../utilities/cookieHandler\";\nimport {useHistory} from \"react-router-dom\";\nimport {PlaylistParametersForm} from \"./PlaylistParametersForm\";\nimport {PlaylistResultList} from \"./PlaylistResultList\";\nimport logo from \"../assets/personal_dj_logo.png\";\n\nexport const Dashboard = () => {\n    const [selectedTrack, setSelectedTrack] = useState<SearchResultModel>();\n    const [playlistParams, setPlaylistParams] = useState<PlaylistParametersModel>();\n\n    const history = useHistory();\n    const query = new URLSearchParams(window.location.search);\n    const authToken = query.get(\"token\");\n\n    // Get user token from the URL bar\n    useEffect(() => {\n        if (authToken) {\n            saveToken(authToken);\n            // Hide user token so they don't accidentally copy paste it out\n            window.location.search = \"\";\n        } else if (!getTokenFromCookies()) {\n            tokenError();\n            history.push(\"/\");\n        }\n    });\n\n    const setParameters = (params: PlaylistParametersModel) => {\n        setPlaylistParams(params);\n    }\n\n    return (\n        <div className={\"container text-center my-3\"}>\n            <img src={logo} className={\"img-fluid col-lg-2 col-1\"}/>\n            <hr/>\n            <TrackSearchForm setSelected={setSelectedTrack}/>\n            {selectedTrack ?\n                <PlaylistParametersForm setParameters={setParameters}/> : <></>\n            }\n            {\n                selectedTrack && playlistParams ?\n                    <PlaylistResultList parameters={playlistParams}\n                                        selectedTrack={selectedTrack}/> :\n                    <></>\n            }\n        </div>\n    )\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Home from \"./components/Home\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Footer from \"./components/Footer\";\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport {TrackSearchForm} from \"./components/TrackSearchForm\";\nimport {Dashboard} from \"./components/Dashboard\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Switch>\n                <Route path=\"/\" exact>\n                    <Home/>\n                </Route>\n                <Route path=\"/dashboard\" exact>\n                    <Dashboard/>\n                </Route>\n            </Switch>\n            <Footer/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}